'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import styles from './BecomeSellerModal.module.scss';

interface BecomeSellerModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function BecomeSellerModal({ isOpen, onClose }: BecomeSellerModalProps) {
  const [storeName, setStoreName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  if (!isOpen) return null;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!storeName.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞');
      return;
    }

    setIsLoading(true);
    
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ–ª–ª–µ—Ä—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç
      localStorage.setItem('sellerActivated', 'true');
      localStorage.setItem('storeName', storeName);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      onClose();
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–µ–ª–ª–µ—Ä—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç
      router.push('/seller');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.overlay} onClick={onClose}>
      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
        <div className={styles.header}>
          <h2 className={styles.title}>üè™ –°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º</h2>
          <button className={styles.closeButton} onClick={onClose}>
            √ó
          </button>
        </div>
        
        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.field}>
            <label htmlFor="storeName" className={styles.label}>
              –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            </label>
            <input
              id="storeName"
              type="text"
              value={storeName}
              onChange={(e) => setStoreName(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–π —Å—É–ø–µ—Ä –º–∞–≥–∞–∑–∏–Ω"
              className={styles.input}
              disabled={isLoading}
            />
          </div>
          
          <div className={styles.actions}>
            <button
              type="button"
              onClick={onClose}
              className={styles.cancelButton}
              disabled={isLoading}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className={styles.submitButton}
              disabled={isLoading || !storeName.trim()}
            >
              {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
